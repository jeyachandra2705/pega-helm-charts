---
global:
  # This values.yaml file is an example. It was created to install Pega on 
  # an OpenShift cluster to help you understand a variety of the commonly-used  
  # settings. It uses a postgreSQL database (DB) and establishes an
  # ElasticSearch search service using an SRS cluster.
  #
  # For more information about each configuration option, see the project readme.

  # Enter your Kubernetes provider.
  provider: "openshift"

  deployment:
    # The name specified will be used to prefix all of the Pega pods (replacing "pega" with something like "app1-dev").
    name: "mypegademo"

  # Deploy Pega nodes
  actions:
    execute: "install"

  # Provide JDBC connection information to the Pega relational database
  #   If you are installing or upgrading on IBM DB2, update the udb.conf file in the /charts/pega/charts/installer/config/udb directory with any additional connection properties.
  jdbc:
    #   url	Valid values are:
    #
    #   Oracle              jdbc:oracle:thin:@//localhost:1521/dbName
    #   IBM DB/2 z / OS 	jdbc:db2://localhost:50000/dbName
    #   IBM DB/2            jdbc:db2://localhost:50000/dbName:fullyMaterializeLobData=true;fullyMaterializeInputStreams=true;
    #                       progressiveStreaming=2;useJDBC4ColumnNameAndLabelSemantics=2;
    #   SQL Server          jdbc:sqlserver://localhost:1433;databaseName=dbName;selectMethod=cursor;sendStringParametersAsUnicode=false
    #   PostgreSQL          jdbc:postgresql://localhost:5432/dbName
    url: "jdbc:oracle:thin:@//localhost:1521/orclpdb"
    #   driverClass 	-- jdbc class.  Valid values are:
    #
    #   Oracle              oracle.jdbc.OracleDriver
    #   IBM DB/2            com.ibm.db2.jcc.DB2Driver
    #   SQL Server          com.microsoft.sqlserver.jdbc.SQLServerDriver
    #   PostgreSQL          org.postgresql.Driver
    driverClass: "oracle.jdbc.OracleDriver"
    #   pega.database.type	Valid values are: mssql, oracledate, udb, db2zos, postgres
    dbType: "oracledate"
    #   For databases that use multiple JDBC driver files (such as DB2), specify comma separated values for 'driverUri'
    driverUri: ""
    username: "demouser"
    password: "demopwd"
    # CUSTOM CONNECTION PROPERTIES
    # Add a list of ; delimited connections properties. The list must end with ;
    # For example: connectionProperties=user=usr;password=pwd;
    connectionProperties: ""
    rulesSchema: "PEGA_RULES_OBJ"
    dataSchema: "PEGA_DATA_OBJ"
    customerDataSchema: ""

  # If using a custom Docker registry, supply the credentials here to pull Docker images.
  docker:
    registry:
      url: "docker.io/jeyachandra2705/pega861-tomcat-oracle"
      username: "jeyachandra2705@gmail.com"
      password: "password"
      # Docker image information for the Pega docker image, containing the application server.
    pega:
      image: "jeyachandra2705/pega861-tomcat-oracle:latest"

  # Upgrade specific properties
  upgrade:
    # Configure only for aks/pks
    # Run "kubectl cluster-info" command to get the service host and https service port of kubernetes api server.
    # Example - Kubernetes master is running at https://<service_host>:<https_service_port>
    kube-apiserver:
      serviceHost: "API_SERVICE_ADDRESS"
      httpsServicePort: "SERVICE_PORT_HTTPS"

  # Specify the Pega tiers to deploy
  tier:
    - name: "web"
      # Create a an interactive tier for web users.  This tier uses
      # the WebUser node type and will be exposed via a service to
      # the load balancer.
      nodeType: "WebUser,BackgroundProcessing,Search,Batch,RealTime,Custom1,Custom2,Custom3,Custom4,Custom5,BIX"

      # Pega requestor specific properties
      requestor:
        # Inactivity time after which requestor is passivated
        passivationTimeSec: 900

      service:
        # For help configuring the service block, see the Helm chart documentation
        # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#service
        port: 80
        targetPort: 8080

      ingress:
        # For help configuring the ingress block including TLS, see the Helm chart documentation
        # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#ingress

        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "openshift.web.dev.pega.io"
        tls:
          # Enable TLS encryption
          enabled: false
          # secretName:
          # useManagedCertificate: false
          # ssl_annotation:

      replicas: 1
      javaOpts: ""
      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""

      deploymentStrategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
        type: RollingUpdate

      livenessProbe:
        port: 8081

      # Optionally overridde default resource specifications
      # The default values may be too high for an example cluster that you set update
      # so you may want to use these minimal settings.
      cpuRequest: 1
      memRequest: "4Gi"
      cpuLimit: 2
      memLimit: "8Gi"
      initialHeap: "3072m"
      maxHeap: "7168m"

      # To configure an alternative user for custom image, set value for runAsUser.
      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context
      # securityContext:
      #   runAsUser: 9001

      hpa:
        enabled: true
    
    - name: "stream"
      # Create a stream tier for queue processing.  This tier deploys
      # as a stateful set to ensure durability of queued data. It may
      # be optionally exposed to the load balancer.
      nodeType: "Stream"

      # Pega requestor specific properties
      requestor:
        # Inactivity time after which requestor is passivated
        passivationTimeSec: 900

      service:
        port: 7003
        targetPort: 7003

      # If a nodeSelector is required for this or any tier, it may be specified here:
      # nodeSelector:
      #  disktype: ssd

      ingress:
        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "openshift.stream.dev.pega.io"
        tls:
          # Enable TLS encryption
          enabled: false
          # secretName:
          # useManagedCertificate: false
          # ssl_annotation:

      livenessProbe:
        port: 8081

      # To configure an alternative user for your custom image, set value for runAsUser
      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context
      # securityContext:
      #   runAsUser: 9001

      # Optionally overridde default resource specifications
      # The default values may be too high for an example cluster that you set update
      # so you may want to use these minimal settings.
      replicas: 1
      cpuRequest: 1
      memRequest: "4Gi"
      cpuLimit: 2
      memLimit: "8Gi"
      initialHeap: "3072m"
      maxHeap: "7168m"
      
      volumeClaimTemplate:
        resources:
          requests:
            storage: 5Gi

# External services

# Cassandra automatic deployment settings.
# Many clients can explore deployments without the use of Cassandra.
cassandra:
  enabled: false
  persistence:
    enabled: true
  resources:
    requests:
      memory: "4Gi"
      cpu: 2
    limits:
      memory: "8Gi"
      cpu: 4

# DDS (external Cassandra) connection settings.
# These settings should only be modified if you are using a custom Cassandra deployment.
dds:
  externalNodes: ""
  port: "9042"
  username: "dnode_ext"
  password: "dnode_ext"
  clientEncryption: false
  trustStore: ""
  trustStorePassword: ""
  keyStore: ""
  keyStorePassword: ""

# Elasticsearch deployment settings.
# Note: This Elasticsearch deployment is used for Pega search, and is not the same Elasticsearch deployment used by the EFK stack.
# These search nodes will be deployed regardless of the Elasticsearch configuration above.
# Refer to README document to configure `Search and Reporting Service` as a search functionality provider under this section.
# In this example, we override the default Docker image with the SRS that delivers your ElasticSearch service through this URL
# that you set up in your Openshift cluster.
stream:
  enabled: false

pegasearch:
  externalSearchService: false
  externalURL: "http://mypega-openshift-demo"

# Pega Installer settings.
installer:
  image: "pega861-tomcat-oracle:latest"
  # Set the initial administrator@pega.com password for your installation.  This will need to be changed at first login.
  # The adminPassword value cannot start with "@".
  adminPassword: "install"
  # Upgrade specific properties
  upgrade:
    # Type of upgrade
    # Valid upgradeType values are 'in-place' , 'zero-downtime' , 'custom' , 'out-of-place-rules' , 'out-of-place-data' .
    upgradeType: "in-place"
    # Specify a name for a target rules schema that the upgrade process creates for patches and upgrades.
    targetRulesSchema: ""
    # Specify a name for a target data schema that the upgrade process creates for patches and upgrades.
    # For postgres databases that you are upgrading from Pega Infinity version 8.4.0 and later
    # And for Oracle databases that you are upgrading from Pega Infinity version 8.4.3 and later.
    targetDataSchema: ""

# Hazelcast settings (applicable from Pega 8.6)
hazelcast:
  image: "YOUR_HAZELCAST_IMAGE:TAG"
  # Setting below to true will deploy the infinity in client server hazelcast mode
  enabled: false
  # No. of initial members to join
  replicas: 3
  # UserName to be used in client server hazelcast mode for authentication
  username: ""
  # Password to be used in client server hazelcast mode for authentication
  password: ""